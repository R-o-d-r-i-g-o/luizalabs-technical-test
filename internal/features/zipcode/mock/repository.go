// Code generated by MockGen. DO NOT EDIT.
// Source: internal/features/zipcode/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	zipcode "luizalabs-technical-test/internal/features/zipcode"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryImp is a mock of RepositoryImp interface.
type MockRepositoryImp struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryImpMockRecorder
}

// MockRepositoryImpMockRecorder is the mock recorder for MockRepositoryImp.
type MockRepositoryImpMockRecorder struct {
	mock *MockRepositoryImp
}

// NewMockRepositoryImp creates a new mock instance.
func NewMockRepositoryImp(ctrl *gomock.Controller) *MockRepositoryImp {
	mock := &MockRepositoryImp{ctrl: ctrl}
	mock.recorder = &MockRepositoryImpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryImp) EXPECT() *MockRepositoryImpMockRecorder {
	return m.recorder
}

// GetAddressByZipCodeAPICep mocks base method.
func (m *MockRepositoryImp) GetAddressByZipCodeAPICep(zipCode string) (*zipcode.GetAddressByZipCodeUnifiedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByZipCodeAPICep", zipCode)
	ret0, _ := ret[0].(*zipcode.GetAddressByZipCodeUnifiedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByZipCodeAPICep indicates an expected call of GetAddressByZipCodeAPICep.
func (mr *MockRepositoryImpMockRecorder) GetAddressByZipCodeAPICep(zipCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByZipCodeAPICep", reflect.TypeOf((*MockRepositoryImp)(nil).GetAddressByZipCodeAPICep), zipCode)
}

// GetAddressByZipCodeBrasilAPI mocks base method.
func (m *MockRepositoryImp) GetAddressByZipCodeBrasilAPI(zipCode string) (*zipcode.GetAddressByZipCodeUnifiedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByZipCodeBrasilAPI", zipCode)
	ret0, _ := ret[0].(*zipcode.GetAddressByZipCodeUnifiedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByZipCodeBrasilAPI indicates an expected call of GetAddressByZipCodeBrasilAPI.
func (mr *MockRepositoryImpMockRecorder) GetAddressByZipCodeBrasilAPI(zipCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByZipCodeBrasilAPI", reflect.TypeOf((*MockRepositoryImp)(nil).GetAddressByZipCodeBrasilAPI), zipCode)
}

// GetAddressByZipCodeOpenCep mocks base method.
func (m *MockRepositoryImp) GetAddressByZipCodeOpenCep(zipCode string) (*zipcode.GetAddressByZipCodeUnifiedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByZipCodeOpenCep", zipCode)
	ret0, _ := ret[0].(*zipcode.GetAddressByZipCodeUnifiedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByZipCodeOpenCep indicates an expected call of GetAddressByZipCodeOpenCep.
func (mr *MockRepositoryImpMockRecorder) GetAddressByZipCodeOpenCep(zipCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByZipCodeOpenCep", reflect.TypeOf((*MockRepositoryImp)(nil).GetAddressByZipCodeOpenCep), zipCode)
}

// GetAddressByZipCodeViaCep mocks base method.
func (m *MockRepositoryImp) GetAddressByZipCodeViaCep(zipCode string) (*zipcode.GetAddressByZipCodeUnifiedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByZipCodeViaCep", zipCode)
	ret0, _ := ret[0].(*zipcode.GetAddressByZipCodeUnifiedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByZipCodeViaCep indicates an expected call of GetAddressByZipCodeViaCep.
func (mr *MockRepositoryImpMockRecorder) GetAddressByZipCodeViaCep(zipCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByZipCodeViaCep", reflect.TypeOf((*MockRepositoryImp)(nil).GetAddressByZipCodeViaCep), zipCode)
}
