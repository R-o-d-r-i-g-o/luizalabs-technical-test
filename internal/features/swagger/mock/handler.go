// Code generated by MockGen. DO NOT EDIT.
// Source: internal/features/swagger/handler.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockHandlerImp is a mock of HandlerImp interface.
type MockHandlerImp struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerImpMockRecorder
}

// MockHandlerImpMockRecorder is the mock recorder for MockHandlerImp.
type MockHandlerImpMockRecorder struct {
	mock *MockHandlerImp
}

// NewMockHandlerImp creates a new mock instance.
func NewMockHandlerImp(ctrl *gomock.Controller) *MockHandlerImp {
	mock := &MockHandlerImp{ctrl: ctrl}
	mock.recorder = &MockHandlerImpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerImp) EXPECT() *MockHandlerImpMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockHandlerImp) Register(g *gin.RouterGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", g)
}

// Register indicates an expected call of Register.
func (mr *MockHandlerImpMockRecorder) Register(g interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockHandlerImp)(nil).Register), g)
}
