// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/middleware/cache_middleware.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockCacheMiddleware is a mock of CacheMiddleware interface.
type MockCacheMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMiddlewareMockRecorder
}

// MockCacheMiddlewareMockRecorder is the mock recorder for MockCacheMiddleware.
type MockCacheMiddlewareMockRecorder struct {
	mock *MockCacheMiddleware
}

// NewMockCacheMiddleware creates a new mock instance.
func NewMockCacheMiddleware(ctrl *gomock.Controller) *MockCacheMiddleware {
	mock := &MockCacheMiddleware{ctrl: ctrl}
	mock.recorder = &MockCacheMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheMiddleware) EXPECT() *MockCacheMiddlewareMockRecorder {
	return m.recorder
}

// Middleware mocks base method.
func (m *MockCacheMiddleware) Middleware() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Middleware indicates an expected call of Middleware.
func (mr *MockCacheMiddlewareMockRecorder) Middleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockCacheMiddleware)(nil).Middleware))
}
